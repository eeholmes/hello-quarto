# Share {.title-middle-dark background-image="images/horst_quarto_penguins_share.png" aria-label="Illustration of two penguins taking a selfie on a phone using a selfie stick."}

##  {#share-intro .center data-menu-title="Share - Intro"}

::: columns
::: {.column width="70%"}
![](images/mine-venn.svg)
:::

::: {.column width="30%"}
![](images/horst_penguins_nametag_mine.png){fig-alt="Penguin with nametag that says \"Mine\""}
:::
:::

::: notes
Thanks Julie!

I'm very excited to have this opportunity to talk to you about Quarto, which I've had the pleasure to live and breathe over the last year.

I work at the intersection of education, research, and development -- I am a developer educator at RStudio and a professor at Duke where I teach and conduct research.

The word educator might make you think I'm in front of students lecturing 24/7 but, in reality, I spend most of my time in front of my computer authoring and creating materials to share with the world: share with my students, share with my fellow educators, and share with anyone interested in learning the things I'm writing or talking about.
Sometimes I'm writing a slide deck for a talk, sometimes creating a website for a course, sometimes writing books, sometimes journal articles.

Whatever it is that I create, I share them all openly - that is, with an open license that allows for free use, reuse, and adaptation.

More often than not I'm thinking "web first" for wider reach, but I also still live in the confines of traditional journal publishing and academia, which means I regularly need to create PDF versions of my work as well.

Therefore an authoring system that allows for multiple types of outputs from a single source that contains both code and prose is not only a time saver, but essential for me to carry on my existence.
And for the last decade, that tool has been R Markdown for me.

In fact, I remember vividly the first time I've heard of knitr at useR 2012.
Yihui Xie and JJ Allaire gave a keynote on reproducible authoring with knitr and it must have been no more than 3 slides into their talk that I started to converting my teaching materials to use it while the keynote was still going on because it so clearly addressed a huge pain point for me -- the pain of creating web-ready, reproducible documents that brought code and prose together without copying-and-pasting and without relying on Sweave, so I could save my sanity.
And by the end of that keynote I was already brainstorming ways of teaching it in my intro stats course to my students.

So, I'll call this keynote a success if some of you are already firing up Quarto right now, instead of listening to me, to see what all the hype is about!
:::

##  {#link-to-slides .center data-menu-title="Link to slides" background-image="images/horst_quarto_penguins_url.png" aria-label="Illustration of two penguins with arms around each other, sharing an iceberg, staring into the sky. A banner on the illustration shows the URL of the slide deck: mine.quarto.pub/hello-quarto."}

::: notes
But I hope you'll continue to listen with one ear and take in the beautiful illustrations by Allison Horst.
And if you just want to enjoy the talk, feel free to go to this link mine.quarto.pub/hello-quarto/, sit back, and I'll advance the slides for you.
:::

## The R Markdown ecosystem

![](images/rmd_ecosystem.png){fig-align="center"}

::: notes
Julie mentioned unifying the R Markdown ecosystem so let's dig a bit more into what that means...

Think of all the packages from the R Markdown universe that you've come to love and rely on over the years.
Each package addresses a different need and offers a different output: for example, you can use blogdown or distill for creating websites and blogs, bookdown for writing a book, rticles for writing journal articles, etc.
:::

## Quarto: Next generation R Markdown {transition="zoom"}

![](images/horst_quarto_ball_straight.png){fig-align="center" width="50%"}

::: notes
Quarto unifies the functionality from these packages,

building on Pandoc on the technical side

and over a decade of experience developing, maintaining, and tweaking these packages as well as community feedback on the human side.

Additionally, any unification effort presents an opportunity to identify and address gaps functionality and inefficiencies in user experience, and the process of building Quarto has been no different.
:::

## Quarto highlights {auto-animate="true"}

::: columns
::: {.column width="5%"}
:::

::: {.column width="40%"}
::: bulletbox
::: {.fragment .fade-in-then-semi-out}
![](images/horst_quarto_ball-1_4.png){width="50px"} Consistent implementation of attractive and handy features across outputs: tabsets, code-folding, syntax highlighting, etc.
:::
:::
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
::: bulletbox
::: {.fragment .fade-in-then-semi-out}
![](images/horst_quarto_ball-2_4.png){width="50px"} More accessible defaults as well as better support for accessibility
:::
:::
:::

::: {.column width="5%"}
:::
:::

::: columns
::: {.column width="5%"}
:::

::: {.column width="40%"}
::: bulletbox
::: {.fragment .fade-in-then-semi-out}
![](images/horst_quarto_ball-3_4.png){width="50px"} Guardrails, particularly helpful for new learners: YAML completion, informative syntax errors, etc.
:::
:::
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
::: bulletbox
::: {.fragment .fade-in-then-semi-out}
![](images/horst_quarto_ball-4_4.png){width="50px"} Support for other languages like Python, Julia, Observable, and more via Jupyter engine for executable code chunks.
:::
:::
:::

::: {.column width="5%"}
:::
:::

::: notes
Some highlights of these improvements include

\<\> consistent implementation of attractive and handy features across *all* outputs, like tabsets, code-folding, and syntax highlighting,

\<\> more accessible defaults as well as better support for creating accessible documents,

\<\> guardrails that are particularly helpful for new learners, like YAML completion and informative syntax errors,

\<\> and perhaps most excitingly for those who are not coming from the R ecosystem, Quarto offers support for other languages like Python, Julia, Observable, and more via the Jupyter engine for executable code chunks, in addition to knitr.
And it's designed to be expandable to more engines and languages, even those that might not exist today.
:::

##  {#demo-1 .centered data-menu-title="Demo 1" background-color="#000000"}

```{=html}
<iframe src="https://drive.google.com/file/d/1RCsho2BpfLk-cAS-E28EIwnjbqVmaVgV/preview" width="1600" height="900" allow="autoplay">
</iframe>
```
**THIS IS NOT THE FINAL DEMO, JUST TRYING EMBEDDING FROM DRIVE**

::: notes
So by now I'm assuming many of you have already started playing with Quarto, or you're waiting for me to do that.
So, let's dive in and see what all the Quarto fuss is about!
:::

## Quarto CLI orchestrates<br>each step of rendering {.takeaway .center}

::: {.fragment .fade-up}
![](images/horst_qmd_render_schema.png){fig-alt="A schema diagram showing what happens going from qmd file to final output. First, qmd is processed with either knir or jupyter. The result is an md file. Then, the md file is processed through Pandoc, and the result can be an HTML, PDF, Word document, or more." fig-align="center"}
:::

::: notes
Now that you've all had a chance to see Quarto in action, a common first question may be "how are R Markdown and Quarto different, under the hood, particularly given that we can just rename an Rmd as a qmd, and it just works?"

The main difference is that with R Markdown, the R package rmarkdown does the heavy lifting of going from source code, the Rmd file, to output, using knitr for evaluating executable code chunks.

\<\> With Quarto, on the other hand, the Quarto command line interface, or the Quarto CLI, as commobly referred, does the orchestration of processing executable code chunks with either knitr or jupyter and then converting the resulting markdown file to the desired output.

While this is technically impressive, I'll be honest, it's not exactly what sparked my interest in Quarto in the first place.
:::

## Quarto makes moving between "things" ~~easy~~ straightforward {.takeaway .center}

::: columns
::: {.column width="33%"}
::: fragment
Document

::: {.code-file .sourceCode .cell-code}
{{< fa file >}} lesson-1.qmd
:::

``` yaml
title: "Lesson 1"
format: html
```
:::
:::

::: {.column width="33%"}
::: fragment
Presentation

::: {.code-file .sourceCode .cell-code}
{{< fa file >}} lesson-1.qmd
:::

``` yaml
title: "Lesson 1"
format: revealjs
```
:::
:::

::: {.column width="33%"}
::: fragment
Website

::: {.code-file .sourceCode .cell-code}
{{< fa file >}} _quarto.yml
:::

``` yaml
project:
  type: website

website: 
  navbar: 
    left:
      - lesson-1.qmd
```
:::
:::
:::

::: notes
What did spark my interest was how easy, or, let's not say easy, I don't like that word in reference to any new technology, but how straightforward it is with Quarto to move between "things", output types.

As an educator, two things are of utmost importance to me about the tools I use to create my materials: reproducibility and ease of transition between output formats, like documents to slides to websites to books.

Over the last year of using Quarto for pretty much everything, I've felt like I've finally found the tool that lets me go from one output type to the other with minimal, if any, futzing around with my source code beyond the yaml.
For example, here are common things I produce

\<\> a lesson in document form \<\> the same content in presentation form \<\> the same content on a page in a website,

and you can see that all that needed to change going between these formats is a few lines in the yaml.
Nothing in the content part of my document.
No slide breaks to remove, no citation style to change, no headings to re-level.
This ease of transition has freed up time to focus my time on content, and that, folks, is the dream!
Now, whether I use that time to better my content or muck around with CSS to no end, I'll let you guess!
:::

## Quarto facilitates open sharing {.takeaway .center}

<br>

::: {.fragment .fade-up .large}
Tooling that makes it easy to share what you do<br> with the world on the web is incredibly **useful**
:::

<br>

::: {.fragment .fade-up .large}
It's **useful** not just to you, but **to the world**<br> as it facilitates open sharing of knowledge<br> for learning and for reuse
:::

::: notes
Ultimately, easily creating reproducible artifacts is great.

But for the sharing story to be complete, the tool also needs to support easily *sharing* those artifacts, like with a simple command like `quarto publish`, and hopefully soon a button RStudio that does the same thing.

\<\> I think that tooling that makes it easy to share what you do with the world on the web is incredibly useful.

\<\> And it's not just useful to you, the creator, but to the world, as it facilitates open sharing of knowledge for learning and for reuse.
:::

##  {#pass-to-collaborate background-image="images/horst-quarto-meteor-L-to-R.png" aria-label="Quarto logo depicted as a meteor against a dark background with a tail comprised of bright stars."}

::: notes
I've been saying "I" a lot so far, I author slide decks, I create websites, etc.

But, I, like many of you, don't operate in a silo disconnected from others.

Much of my work, and much of Julie's work is collaborative.

So, over to you Julie, for collaborating with Quarto.
:::
